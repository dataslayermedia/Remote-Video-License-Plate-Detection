"use strict";
// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatastoreClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/datastore_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./datastore_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Each RPC normalizes the partition IDs of the keys in its input entities,
 *  and always returns entities with keys with normalized partition IDs.
 *  This applies to all keys and entities, including those in values, except keys
 *  with both an empty path and an empty or unset partition ID. Normalization of
 *  input keys sets the project ID (if not already set) to the project ID from
 *  the request.
 *
 * @class
 * @memberof v1
 */
class DatastoreClient {
    /**
     * Construct an instance of DatastoreClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new DatastoreClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v1/{name=projects/*/operations/*}:cancel',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v1/{name=projects/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v1/{name=projects/*/operations/*}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v1/{name=projects/*}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        this.descriptors.longrunning = {};
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.datastore.v1.Datastore', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.datastoreStub) {
            return this.datastoreStub;
        }
        // Put together the "service stub" for
        // google.datastore.v1.Datastore.
        this.datastoreStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.datastore.v1.Datastore')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.datastore.v1.Datastore, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const datastoreStubMethods = [
            'lookup',
            'runQuery',
            'runAggregationQuery',
            'beginTransaction',
            'commit',
            'rollback',
            'allocateIds',
            'reserveIds',
        ];
        for (const methodName of datastoreStubMethods) {
            const callPromise = this.datastoreStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.datastoreStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'datastore.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'datastore.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/datastore',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    lookup(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.projectId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<project_id>.*)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['project_id']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { project_id: parameterValue });
                }
            }
        }
        {
            const fieldValue = request.databaseId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<database_id>.*)'));
                if (match) {
                    const parameterValue = (_d = (_c = match.groups) === null || _c === void 0 ? void 0 : _c['database_id']) !== null && _d !== void 0 ? _d : fieldValue;
                    Object.assign(routingParameter, { database_id: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.lookup(request, options, callback);
    }
    runQuery(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.projectId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<project_id>.*)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['project_id']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { project_id: parameterValue });
                }
            }
        }
        {
            const fieldValue = request.databaseId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<database_id>.*)'));
                if (match) {
                    const parameterValue = (_d = (_c = match.groups) === null || _c === void 0 ? void 0 : _c['database_id']) !== null && _d !== void 0 ? _d : fieldValue;
                    Object.assign(routingParameter, { database_id: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.runQuery(request, options, callback);
    }
    runAggregationQuery(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.projectId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<project_id>.*)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['project_id']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { project_id: parameterValue });
                }
            }
        }
        {
            const fieldValue = request.databaseId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<database_id>.*)'));
                if (match) {
                    const parameterValue = (_d = (_c = match.groups) === null || _c === void 0 ? void 0 : _c['database_id']) !== null && _d !== void 0 ? _d : fieldValue;
                    Object.assign(routingParameter, { database_id: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.runAggregationQuery(request, options, callback);
    }
    beginTransaction(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.projectId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<project_id>.*)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['project_id']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { project_id: parameterValue });
                }
            }
        }
        {
            const fieldValue = request.databaseId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<database_id>.*)'));
                if (match) {
                    const parameterValue = (_d = (_c = match.groups) === null || _c === void 0 ? void 0 : _c['database_id']) !== null && _d !== void 0 ? _d : fieldValue;
                    Object.assign(routingParameter, { database_id: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.beginTransaction(request, options, callback);
    }
    commit(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.projectId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<project_id>.*)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['project_id']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { project_id: parameterValue });
                }
            }
        }
        {
            const fieldValue = request.databaseId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<database_id>.*)'));
                if (match) {
                    const parameterValue = (_d = (_c = match.groups) === null || _c === void 0 ? void 0 : _c['database_id']) !== null && _d !== void 0 ? _d : fieldValue;
                    Object.assign(routingParameter, { database_id: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.commit(request, options, callback);
    }
    rollback(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.projectId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<project_id>.*)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['project_id']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { project_id: parameterValue });
                }
            }
        }
        {
            const fieldValue = request.databaseId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<database_id>.*)'));
                if (match) {
                    const parameterValue = (_d = (_c = match.groups) === null || _c === void 0 ? void 0 : _c['database_id']) !== null && _d !== void 0 ? _d : fieldValue;
                    Object.assign(routingParameter, { database_id: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.rollback(request, options, callback);
    }
    allocateIds(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.projectId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<project_id>.*)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['project_id']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { project_id: parameterValue });
                }
            }
        }
        {
            const fieldValue = request.databaseId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<database_id>.*)'));
                if (match) {
                    const parameterValue = (_d = (_c = match.groups) === null || _c === void 0 ? void 0 : _c['database_id']) !== null && _d !== void 0 ? _d : fieldValue;
                    Object.assign(routingParameter, { database_id: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.allocateIds(request, options, callback);
    }
    reserveIds(request, optionsOrCallback, callback) {
        var _a, _b, _c, _d;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        const routingParameter = {};
        {
            const fieldValue = request.projectId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<project_id>.*)'));
                if (match) {
                    const parameterValue = (_b = (_a = match.groups) === null || _a === void 0 ? void 0 : _a['project_id']) !== null && _b !== void 0 ? _b : fieldValue;
                    Object.assign(routingParameter, { project_id: parameterValue });
                }
            }
        }
        {
            const fieldValue = request.databaseId;
            if (fieldValue !== undefined && fieldValue !== null) {
                const match = fieldValue.toString().match(RegExp('(?<database_id>.*)'));
                if (match) {
                    const parameterValue = (_d = (_c = match.groups) === null || _c === void 0 ? void 0 : _c['database_id']) !== null && _d !== void 0 ? _d : fieldValue;
                    Object.assign(routingParameter, { database_id: parameterValue });
                }
            }
        }
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(routingParameter);
        this.initialize();
        return this.innerApiCalls.reserveIds(request, options, callback);
    }
    /**
     * Gets the latest state of a long-running operation.  Clients can use this
     * method to poll the operation result at intervals as recommended by the API
     * service.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     *   for the details.
     * @param {function(?Error, ?Object)=} callback
     *   The function which will be called with the result of the API call.
     *
     *   The second parameter to the callback is an object representing
     *   {@link google.longrunning.Operation | google.longrunning.Operation}.
     * @return {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     * {@link google.longrunning.Operation | google.longrunning.Operation}.
     * The promise has a method named "cancel" which cancels the ongoing API call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * const name = '';
     * const [response] = await client.getOperation({name});
     * // doThingsWith(response)
     * ```
     */
    getOperation(request, options, callback) {
        return this.operationsClient.getOperation(request, options, callback);
    }
    /**
     * Lists operations that match the specified filter in the request. If the
     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.
     *
     * For-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation collection.
     * @param {string} request.filter - The standard list filter.
     * @param {number=} request.pageSize -
     *   The maximum number of resources contained in the underlying API
     *   response. If page streaming is performed per-resource, this
     *   parameter does not affect the return value. If page streaming is
     *   performed per-page, this determines the maximum number of
     *   resources in a page.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     *   e.g, timeout, retries, paginations, etc. See {@link
     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     *   details.
     * @returns {Object}
     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * for await (const response of client.listOperationsAsync(request));
     * // doThingsWith(response)
     * ```
     */
    listOperationsAsync(request, options) {
        return this.operationsClient.listOperationsAsync(request, options);
    }
    /**
     * Starts asynchronous cancellation on a long-running operation.  The server
     * makes a best effort to cancel the operation, but success is not
     * guaranteed.  If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
     * {@link Operations.GetOperation} or
     * other methods to check whether the cancellation succeeded or whether the
     * operation completed despite cancellation. On successful cancellation,
     * the operation is not deleted; instead, it becomes an operation with
     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of
     * 1, corresponding to `Code.CANCELLED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be cancelled.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the
     * details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.cancelOperation({name: ''});
     * ```
     */
    cancelOperation(request, options, callback) {
        return this.operationsClient.cancelOperation(request, options, callback);
    }
    /**
     * Deletes a long-running operation. This method indicates that the client is
     * no longer interested in the operation result. It does not cancel the
     * operation. If the server doesn't support this method, it returns
     * `google.rpc.Code.UNIMPLEMENTED`.
     *
     * @param {Object} request - The request object that will be sent.
     * @param {string} request.name - The name of the operation resource to be deleted.
     * @param {Object=} options
     *   Optional parameters. You can override the default settings for this call,
     * e.g, timeout, retries, paginations, etc. See {@link
     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}
     * for the details.
     * @param {function(?Error)=} callback
     *   The function which will be called with the result of the API call.
     * @return {Promise} - The promise which resolves when API call finishes.
     *   The promise has a method named "cancel" which cancels the ongoing API
     * call.
     *
     * @example
     * ```
     * const client = longrunning.operationsClient();
     * await client.deleteOperation({name: ''});
     * ```
     */
    deleteOperation(request, options, callback) {
        return this.operationsClient.deleteOperation(request, options, callback);
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.datastoreStub && !this._terminated) {
            return this.datastoreStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.DatastoreClient = DatastoreClient;
//# sourceMappingURL=datastore_client.js.map